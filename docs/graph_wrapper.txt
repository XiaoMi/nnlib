
/*
 * Copyright (c) 2019, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the
 * disclaimer below) provided that the following conditions are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 *    * Neither the name of The Linux Foundation nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
 * GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

Purpose:
========
"Graph Wrapper" is to reduce hexagonNN initialization time by optimizing
RPC calls

Source code:
============
    hexagon
       |- host
       |    |- hexnn_dsp_api.c
       |    |- hexnn_dsp_api.h
       |    |- hexnn_dsp_api_impl.c
       |    |- hexnn_dsp_domians_api.c
       |    |- hexnn_dsp_domains_api.h
       |    |- hexnn_dsp_domains_api_impl.c
       |    |- hexnn_graph_wrapper.cpp
       |    |_ hexnn_graph_wrapper.hpp
       |
       |_ interface
            |_ hexnn_graph_wrapper_interface.h

Interface:
==========
There is no interface change required. Application can use existing call flow.
In order to use this feature, application only updates makefile by including
new files instead of hexagon_nn_stub.c.

Below is additional changes in makefile in order to support graph wrapper
(Please refer to Hexagon SDK for how to create an android application)

    # stand-alone executable
    BUILD_EXES+=sample

    sample_C_SRCS += \
        <c files for sample app> \

    ifeq ($(GRAPH_WRAPPER), 1)
        sample_C_SRCS += hexagon/host/hexnn_dsp_api hexagon/host/hexnn_dsp_api_impl
        sample_CPP_SRCS += hexagon/host/hexnn_graph_wrapper
    else
        sample_C_SRCS += $V/hexagon_nn_stub
    endif

    ifeq ($(GRAPH_WRAPPER), 1)
    ifeq ($(V_aarch64), 1)
        sample_DLLS += $(ANDROID_GLIBSTDC_DIR)/libs/arm64-v8a/libgnustl_shared
    else
        sample_DLLS += $(ANDROID_GLIBSTDC_DIR)/libs/armeabi-v7a/libgnustl_shared
    endif
    endif

    INCDIRS += \
      interface

    ...

    # copy final build products to the ship directory
    BUILD_COPIES = \
        <all files need to copy>
        interface/hexnn_graph_wrapper_interface.h \
       $(DLLS) \
       $(EXES) \
       $(LIBS) \
       $(SHIP_DIR)/ ;

Sample make command with above changes
    make tree GRAPH_WRAPPER=1 V=android_Debug_aarch64 CDSP_FLAG=1 Q6VERSION=v66 \
    V66=1 sample=1

Prerequisite:
=============
1. Application must first initialize rpcmem by calling rpcmem_init() function.
   Please check hexagon SDK documentation about how to use rpcmem APIs
2. User needs to push android STL lib onto target. for example, if using g++ compiler,
   User needs to push libgnustl_shared.so

