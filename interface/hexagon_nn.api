/*
 * Copyright (c) 2016-2019, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the
 * disclaimer below) provided that the following conditions are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 *    * Neither the name of The Linux Foundation nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
 * GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Actual functions in the interface */
/* Returns 0 on success, nonzero on error unless otherwise noted */
/* Configure the hardware and software environment.  Should be called once before doing anything */
long config();
long config_with_options(
			 in sequence<hexagon_nn_uint_option> uint_options,
			 in sequence<hexagon_nn_string_option> string_options
	);
long graph_config(
			 in hexagon_nn_nn_id id,
			 in sequence<hexagon_nn_uint_option> uint_options,
			 in sequence<hexagon_nn_string_option> string_options
	);

long get_dsp_offset(rout unsigned long libhexagon_addr, rout unsigned long fastrpc_shell_addr);

/* Initialize a new graph, returns a new nn_id or -1 on error */
long init(rout hexagon_nn_nn_id g);

/* Set debug verbosity.  Default is 0, higher values are more verbose */
long set_debug_level(in hexagon_nn_nn_id id, in long level);

/* Pretty print the graph.  */
long snpprint(in hexagon_nn_nn_id id, inrout sequence<octet> buf);

/* Print the log into the buffer */
long getlog(in hexagon_nn_nn_id id, inrout sequence<octet> buf);

/* Append a node to the graph.  Nodes are executed in the appended order. */
long append_node(
	in hexagon_nn_nn_id id,
	in unsigned long node_id,
	in unsigned long operation,
	in hexagon_nn_padding_type padding,
	in sequence<hexagon_nn_input> inputs,
	in sequence<hexagon_nn_output> outputs);

/*
 * Append a const node into the graph.  The data is copied locally during this
 * call, the caller does not need it to persist.
 */
long append_const_node(
	in hexagon_nn_nn_id id,
	in unsigned long node_id,
	in unsigned long batches,
	in unsigned long height,
	in unsigned long width,
	in unsigned long depth,
	in sequence<octet> data);

/*
 * Append an empty const node into the graph.  The data is copied locally during this
 * call, the caller does not need it to persist.
 */
long append_empty_const_node(
	in hexagon_nn_nn_id id,
	in unsigned long node_id,
	in unsigned long batches,
	in unsigned long height,
	in unsigned long width,
	in unsigned long depth,
	in unsigned long size);

/*
 * Append a const node into the graph.  The data is copied locally during this
 * call, the caller does not need it to persist.
 */
long populate_const_node(
	in hexagon_nn_nn_id id,
	in unsigned long node_id,
	in sequence<octet> data,
	in unsigned long target_offset);

long append_node_list(in hexagon_nn_nn_id id, in sequence<hexagon_nn_op_node> ops);

long append_const_node_list(in hexagon_nn_nn_id id, in sequence<hexagon_nn_const_node> consts);

/*
 * Prepare a graph for execution.  Must be done before attempting to execute the graph.
 */
long prepare(in hexagon_nn_nn_id id);
/* Execute the graph with a single input and a single output. */
long execute(in hexagon_nn_nn_id id,
	in unsigned long batches_in,
	in unsigned long height_in,
	in unsigned long width_in,
	in unsigned long depth_in,
	in sequence<octet> data_in,
	rout unsigned long batches_out,
	rout unsigned long height_out,
	rout unsigned long width_out,
	rout unsigned long depth_out,
	rout sequence<octet> data_out,
	rout unsigned long data_len_out);

/* Tear down a graph, destroying it and freeing resources.  */
long teardown(in hexagon_nn_nn_id id);



/* read a variable */
long variable_read( in hexagon_nn_nn_id id,
	in unsigned long node_id,
	in          long output_index,
	rout unsigned long batches_out,
	rout unsigned long height_out,
	rout unsigned long width_out,
	rout unsigned long depth_out,
	rout sequence<octet> data_out,
	rout unsigned long data_len_out );

/* write a variable */

long variable_write( in hexagon_nn_nn_id id,
	in unsigned long node_id,
	in          long output_index,
	in unsigned long batches,
	in unsigned long height,
	in unsigned long width,
	in unsigned long depth,
	in sequence<octet> data_in);

/* write a variable, 'flat' mode (retains shape; also can set all outputs at once with output_index = -1) */

long variable_write_flat( in hexagon_nn_nn_id id,
	in unsigned long node_id,
	in          long output_index,
	in sequence<octet> data_in);

/* Set power saving level.  Abstract API with 0 indicating as fast as possible, 255 or above indicating low-power. */
long set_powersave_level(in unsigned long level);

/* Set power saving attributes specifically. This API can be used instead of set_powersave_level. */
/* Corner specifies the desired voltage corner. NN_CORNER_RELEASE indicates to revoke power vote */
/* dcvs specifies whether to use default DCVS policy for requested corner, or to override with DCVS enabled/disabled. */
/* latency specifies the minimum tolerable uSec wakeup latency for the DSP. 0 indicates to use the default for the requested corner. */
long set_powersave_details(in hexagon_nn_corner_type corner, in hexagon_nn_dcvs_type dcvs, in unsigned long latency);

long set_clocks(in hexagon_nn_corner_type corner, in hexagon_nn_dcvs_type dcvs, in unsigned long latency);
long remove_clocks();

/* Get performance information */
long get_perfinfo(in hexagon_nn_nn_id id, rout sequence<hexagon_nn_perfinfo> info_out, rout unsigned long n_items);
/* Reset performance information, and select a new event. */
long reset_perfinfo(in hexagon_nn_nn_id id, in unsigned long event);
/* Total cycles for the last execution */
long last_execution_cycles(in hexagon_nn_nn_id id, rout unsigned long cycles_lo, rout unsigned long cycles_hi);
/* Get the version of the library */
long version(rout long ver);
/* Given a name, return the op ID */
long op_name_to_id(in string name, rout unsigned long node_id);
/* Given an ID, return the op name */
long op_id_to_name(in unsigned long node_id, rout string name);
/* Count the number of nodes in the graph right now */
/*long count_nodes(in hexagon_nn_nn_id id, rout unsigned long n_items);*/
/* Get number of nodes created */
long get_num_nodes_in_graph(in hexagon_nn_nn_id id, rout unsigned long num_nodes);

/* The following are deprecated */

/* Equivalent to set_powersave_level(0); */
long disable_dcvs();
/* Equivalent to version(); */
long GetHexagonBinaryVersion(rout long ver); // deprecated name for version(rout long ver);
long PrintLog(in sequence<octet> buf);

/* Enable specifying multiple inputs and outputs */
long execute_new(in hexagon_nn_nn_id id,
	in sequence<hexagon_nn_tensordef> inputs,
	rout sequence<hexagon_nn_tensordef> outputs);

/* Enable specifying multiple inputs and outputs, and returning extra info. */
long execute_with_info(in hexagon_nn_nn_id id,
	in sequence<hexagon_nn_tensordef> inputs,
	rout sequence<hexagon_nn_tensordef> outputs,
        rout hexagon_nn_execute_info execute_info);

/* Initialize a new graph with info, returns a new nn_id or -1 on error */
long init_with_info(rout hexagon_nn_nn_id g, in hexagon_nn_initinfo info);

/* Get node_type */
long get_nodetype(in hexagon_nn_nn_id graph_id, in hexagon_nn_nn_id node_id, rout unsigned long node_type);

/* Total cycles for previous executions */
long multi_execution_cycles(in hexagon_nn_nn_id id, rout unsigned long cycles_lo, rout unsigned long cycles_hi);

/* Get the DSP core-clock frequency */
long get_power(in long type);

/* set an option */
long set_graph_option(in hexagon_nn_nn_id id, in string name, in long value);

/* program cached Graph.  Internal API, Do Not Use*/
long populate_graph(in hexagon_nn_nn_id id, in sequence<octet> graph_data);

/*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//   Add new interfaces to the end!!!!
//      _       _     _   _   _
//     / \   __| | __| | | | | | ___ _ __ ___
//    / _ \ / _` |/ _` | | |_| |/ _ \ '__/ _ \
//   / ___ \ (_| | (_| | |  _  |  __/ | |  __/
//  /_/   \_\__,_|\__,_| |_| |_|\___|_|  \___|
//===============================================
*/

