/*
 * Copyright (c) 2016-2019, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the
 * disclaimer below) provided that the following conditions are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 *    * Neither the name of The Linux Foundation nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
 * GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/*
 * Now that that's out of the way, let's get to the good stuff.
 *
 * This contains memory allocation routines
 */

#ifndef NN_GRAPH_IDL
#define NN_GRAPH_IDL 1

/* Data types used */

/* Data types in here are statically prefixed with "hexagon_nn" instead of letting the
 * IDL compiler do it (which would prefix it with the interface name)
 * This is to allow the domains version of the hexagon_nn interface, which
 * is called "hexagon_nn_domains" to use the same data types instead of
 * having a duplicated data type set prefixed with "hexagon_nn_domains"
 */

struct hexagon_nn_input {
	unsigned long src_id;
	unsigned long output_idx;	// used if src_id not reserved
};


#define HEXAGON_NN_MAX_DIMENSIONS 8

struct hexagon_nn_output {
	unsigned long rank;
	unsigned long max_sizes[8];	// IDL doesn't work with #defines maybe?
	unsigned long elementsize;
	long zero_offset;		// FUTURE: static range.  Set to 0 for current ops.
	float stepsize;			// FUTURE: static range.  Set to 0 for current ops.
};

struct hexagon_nn_perfinfo {
	unsigned long node_id;
	unsigned long executions;
	unsigned long counter_lo;	/* IDL generates broken 64 bit types :-( */
	unsigned long counter_hi;	/* IDL generates broken 64 bit types :-( */
};

typedef long hexagon_nn_nn_id;

struct hexagon_nn_initinfo {
	long priority; /* 0 is default, negative is higher priority, higher is lower priority */
};

enum hexagon_nn_padding_type {
	NN_PAD_NA,
	NN_PAD_SAME,
	NN_PAD_VALID,
	NN_PAD_MIRROR_REFLECT,
	NN_PAD_MIRROR_SYMMETRIC,
	NN_PAD_SAME_CAFFE
};

enum hexagon_nn_corner_type {
    NN_CORNER_RELEASE,
	NN_CORNER_TURBO,
	NN_CORNER_NOMPLUS,
	NN_CORNER_NOMINAL,
	NN_CORNER_SVSPLUS,
	NN_CORNER_SVS,
	NN_CORNER_SVS2
};

enum hexagon_nn_dcvs_type {
    NN_DCVS_DEFAULT,
	NN_DCVS_ENABLE,
	NN_DCVS_DISABLE
};

struct hexagon_nn_tensordef {
	unsigned long batches;		/* Batches */
	unsigned long height;		/* Height */
	unsigned long width;		/* Width */
	unsigned long depth;		/* Depth */
	sequence<octet> data;		/* Data + DataLen */
	unsigned long data_valid_len;	/* Return location for valid data out */
	unsigned long unused;		/* Unused */
};

enum hexagon_nn_udo_err {
        UDO_SUCCESS,
        UDO_GRAPH_ID_NOT_FOUND,
        UDO_GRAPH_NOT_UNDER_CONSTRUCTION,
        UDO_NODE_ALLOCATION_FAILURE,
        UDO_MEMORY_ALLOCATION_FAILURE,
        UDO_INVALID_INPUTS_OUTPUTS_NUMBER,
        UDO_INVALID_INPUTS_OUTPUTS_ELEMENT_SIZE,
        UDO_LIB_FAILED_TO_OPEN,
        UDO_LIB_FAILED_TO_LOAD_GET_IMP_INFO,
        UDO_LIB_FAILED_TO_LOAD_CREATE_OP_FACTORY,
        UDO_LIB_FAILED_TO_LOAD_CREATE_OP,
        UDO_LIB_FAILED_TO_LOAD_EXECUTE_OP,
        UDO_LIB_FAILED_TO_LOAD_RELEASE_OP,
        UDO_LIB_FAILED_TO_LOAD_RELEASE_OP_FACTORY,
        UDO_LIB_FAILED_TO_LOAD_TERMINATE_LIBRARY,
        UDO_LIB_FAILED_TO_LOAD_GET_VERSION,
        UDO_LIB_FAILED_TO_LOAD_QUERY_OP,
        UDO_HEXNN_FAILED_TO_INITIALIZE_INFRASTRUCTURE,
        UDO_LIB_FAILED_TO_INITIALIZE,
        UDO_LIB_FAILED_TO_RETURN_INFO,
        UDO_LIB_WRONG_CORE_TYPE,
        UDO_LIB_FAILED_TO_QUERY_VERSION,
        UDO_LIB_VERSION_MISMATCH,
        UDO_LIB_ALREADY_REGISTERED,
        UDO_LIB_NOT_REGISTERED,
        UDO_LIB_NOT_REGISTERED_WITH_THIS_OP,
        UDO_LIB_FAILED_TO_QUERY_OP,
        UDO_LIB_UNSUPPORTED_QUANTIZATION_TYPE,
        UDO_FAILED_TO_CREATE_OP_FACTORY,
        UDO_INVALID_NODE_ID,
        UDO_LIB_FAILED_TO_TERMINATE
};

enum hexagon_nn_execute_result {
        NN_EXECUTE_SUCCESS,
        NN_EXECUTE_ERROR,
        NN_EXECUTE_BUFFER_SIZE_ERROR,
        NN_EXECUTE_UDO_ERROR,
        NN_EXECUTE_GRAPH_NOT_FOUND,
        NN_EXECUTE_GRAPH_NOT_PREPARED,
        NN_EXECUTE_INPUTS_MEM_ALLOC_ERROR,
        NN_EXECUTE_OUTPUTS_MEM_ALLOC_ERROR,
        NN_EXECUTE_PRIORITY_UPDATE_ERROR,
        NN_EXECUTE_PRIORITY_RESTORE_ERROR,
        NN_EXECUTE_VTCM_ACQUIRE_ERROR,
        NN_EXECUTE_LOOP_UPDATE_ERROR
};

struct hexagon_nn_execute_info {
        hexagon_nn_execute_result result;
        sequence<octet> extraInfo;
        unsigned long extraInfoValidLen;
};

enum hexagon_nn_option_type {
	// WARNING - DANGER!  Do not alter existing enum-IDs.
	//                    These IDs should be stable across builds
	//                    So you should:
    //                    Add new items to BOTTOM
	NN_OPTION_NOSUCHOPTION,
	NN_OPTION_SCALAR_THREADS,
	NN_OPTION_HVX_THREADS,
	NN_OPTION_VTCM_REQ,
	NN_OPTION_ENABLE_GRAPH_PRINT,
	NN_OPTION_ENABLE_TENSOR_PRINT,
	NN_OPTION_TENSOR_PRINT_FILTER,
	NN_OPTION_HAP_MEM_GROW_SIZE,
	NN_OPTION_ENABLE_CONST_PRINT,

	//  /\.
	//   \___ Add NEW entries HERE, at BOTTOM
	NN_OPTION_LASTPLUSONE
};
struct hexagon_nn_uint_option {
  unsigned long option_id;
  unsigned long uint_value;
};

// TODO - see https://jira.qualcomm.com/jira/browse/APD-4745
//        which suggests trying "string" instead of char[]
//        for arbitrary length buffers
#define MAX_STRING_L 256
struct hexagon_nn_string_option {
  unsigned long option_id;
  char string_data[256];
};

struct hexagon_nn_op_node {
  unsigned long node_id;
  unsigned long operation;
  hexagon_nn_padding_type padding;
  sequence<hexagon_nn_input> inputs;
  sequence<hexagon_nn_output> outputs;
};

struct hexagon_nn_const_node {
  unsigned long node_id;
  hexagon_nn_tensordef tensor;
};

interface hexagon_nn {

#include "hexagon_nn.api"

}; /* interface hexagon_nn */

#include "remote.idl"

interface hexagon_nn_domains : remote_handle64 {

#include "hexagon_nn.api"

}; /* interface hexagon_nn_domains */

#endif

