/*
 * Copyright (c) 2016-2018, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the
 * disclaimer below) provided that the following conditions are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 *    * Neither the name of The Linux Foundation nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
 * GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/*
 * Now that that's out of the way, let's get to the good stuff.
 * 
 * This contains memory allocation routines
 */

#ifndef NN_GRAPH_IDL
#define NN_GRAPH_IDL 1

interface hexagon_nn {

/* Data types used */

struct input {
	unsigned long src_id;
	unsigned long output_idx;	// used if src_id not reserved
};


#define HEXAGON_NN_MAX_DIMENSIONS 8

struct output {
	unsigned long rank;
	unsigned long max_sizes[8];	// IDL doesn't work with #defines maybe?
	unsigned long elementsize;
	long zero_offset;		// FUTURE: static range.  Set to 0 for current ops.
	float stepsize;			// FUTURE: static range.  Set to 0 for current ops.
};

struct perfinfo {
	unsigned long node_id;
	unsigned long node_type;
	unsigned long executions;
	unsigned long unused;
	unsigned long counter_lo;	/* IDL generates broken 64 bit types :-( */
	unsigned long counter_hi;	/* IDL generates broken 64 bit types :-( */
};

typedef long nn_id;
enum padding_type {
	NN_PAD_NA,
	NN_PAD_SAME,
	NN_PAD_VALID,
	NN_PAD_MIRROR_REFLECT,
	NN_PAD_MIRROR_SYMMETRIC,
	NN_PAD_SAME_CAFFE
};

struct tensordef {
	unsigned long batches;		/* Batches */
	unsigned long height;		/* Height */
	unsigned long width;		/* Width */
	unsigned long depth;		/* Depth */
	sequence<octet> data;		/* Data + DataLen */
	unsigned long data_valid_len;	/* Return location for valid data out */
	unsigned long unused;		/* Unused */
};

struct op_node {
	unsigned long node_id;
	unsigned long operation;
	padding_type padding;
	sequence<input> inputs;
	sequence<output> outputs;
};

struct const_node {
	unsigned long node_id;
	tensordef tensor;
};

/* 
 * 
 * Please put new functions at the end
 * 
 * This helps during the transitioning of a change in the interface
 * 
 * Otherwise, if the DSP library and ARM side were built with a mismatch,
 * you might not get the correct function call and will observe strange 
 * behavior.
 * 
 */

/* Actual functions in the interface */
/* Returns 0 on success, nonzero on error unless otherwise noted */
/* Configure the hardware and software environment.  Should be called once before doing anything */
long config();

/* Initialize a new graph, returns a new nn_id or -1 on error */
long init(rout nn_id g);

/* Set debug verbosity.  Default is 0, higher values are more verbose */
long set_debug_level(in nn_id id, in long level);

/* Pretty print the graph.  */
long snpprint(in nn_id id, inrout sequence<octet> buf);

/* Print the log into the buffer */
long getlog(in nn_id id, inrout sequence<octet> buf);

/* Append a node to the graph.  Nodes are executed in the appended order. */
long append_node(
	in nn_id id,
	in unsigned long node_id,
	in unsigned long operation,
	in padding_type padding,
	in sequence<input> inputs,
	in sequence<output> outputs);

long append_node_list(in nn_id id, in sequence<op_node> ops);

/* 
 * Append a const node into the graph.  The data is copied locally during this
 * call, the caller does not need it to persist.
 */
long append_const_node(
	in nn_id id,
	in unsigned long node_id,
	in unsigned long batches,
	in unsigned long height,
	in unsigned long width,
	in unsigned long depth,
	in sequence<octet> data);

long append_const_node_list(in nn_id id, in sequence<const_node> consts);

/*
 * Prepare a graph for execution.  Must be done before attempting to execute the graph.
 */
long prepare(in nn_id id);
/* Execute the graph with a single input and a single output. */
long execute(in nn_id id, 
	in unsigned long batches_in, 
	in unsigned long height_in, 
	in unsigned long width_in, 
	in unsigned long depth_in, 
	in sequence<octet> data_in, 
	rout unsigned long batches_out, 
	rout unsigned long height_out, 
	rout unsigned long width_out, 
	rout unsigned long depth_out, 
	rout sequence<octet> data_out,
	rout unsigned long data_len_out);

/* Tear down a graph, destroying it and freeing resources.  */
long teardown(in nn_id id);

/* Set power saving level.  0 means as fast as possible. */
long set_powersave_level(in unsigned long level);

/* Get performance information */
long get_perfinfo(in nn_id id, rout sequence<perfinfo> info_out, rout unsigned long n_items);
/* Reset performance information, and select a new event. */
long reset_perfinfo(in nn_id id, in unsigned long event);
/* Total cycles for the last execution */
long last_execution_cycles(in nn_id id, rout unsigned long cycles_lo, rout unsigned long cycles_hi);
/* Get the version of the library */
long version(rout long ver);
/* Given a name, return the op ID */
long op_name_to_id(in string name, rout unsigned long node_id);
/* Given an ID, return the op name */
long op_id_to_name(in unsigned long node_id, rout string name);
/* Count the number of nodes in the graph right now */
/*long count_nodes(in nn_id id, rout unsigned long n_items);*/


/* The following are deprecated */

/* Equivalent to set_powersave_level(0); */
long disable_dcvs();
/* Equivalent to version(); */
long GetHexagonBinaryVersion(rout long ver); // deprecated name for version(rout long ver);
long PrintLog(in sequence<octet> buf);

/* Enable specifying multiple inputs and outputs */
long execute_new(in nn_id id,
	in sequence<tensordef> inputs,
	rout sequence<tensordef> outputs);

unsigned long get_dsp_offset();

}; /* interface hexagon_nn */


#endif

